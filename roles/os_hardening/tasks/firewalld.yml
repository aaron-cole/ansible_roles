##Firewalld

- name: Ensure Firewalld IS installed
  package:
    name: firewalld
    state: present
  when:
  - package_firewalld_install | bool

- name: Ensure nftables IS installed
  package:
    name: nftables
    state: present
  when:
  - package_nftables_install | bool
  
- name: Enable service Firewalld
  block:
  - name: Gather the package facts
    package_facts:
      manager: auto
  - name: Enable service firewalld
    service:
      name: firewalld
      enabled: 'yes'
      state: started
    when:
    - '"firewalld" in ansible_facts.packages'
  when:
  - service_firewalld_enabled | bool

- name: Configure /etc/firewalld/firewalld.conf
  block:
  - name: FirewallBackend value in /etc/firewalld/firewalld.conf
    lineinfile:
      path: /etc/firewalld/firewalld.conf
      create: false
      regexp: ^FirewallBackend
      line: FirewallBackend=nftables
      state: present
    notify:
    - Restart firewalld service
  when:
  - configure_firewalld_backend | bool

- name: get current active zones
  shell: '/usr/bin/firewall-cmd --get-active-zones | grep -v "interfaces: "'
#  shell: '/usr/bin/firewall-cmd --get-active-zones'
  register: firewalld_active_zones
  changed_when: false
  failed_when: firewalld_active_zones.rc > 0
  when:
  - firewalld_active_zone_drop | bool

- debug: var=firewalld_active_zones.stdout_lines|split()

#- set_fact:
#    active_zones: '{{ active_zones|default({})|
#  with_i:
#  - '{{ firewalld_active_zones.stdout_lines.split() }}

#- name: set DROP for current active zones
#  shell: '/usr/bin/firewall-cmd --permanent --zone={{ item }} --set-target=DROP'
#  changed_when: true
#  loop: '{{ firewalld_active_zones.stdout_lines }}'
#  when:
#  - firewalld_active_zones.stdout_lines | length > 0
#  - firewalld_active_zone_drop | bool
#  notify:
#  - Reload firewalld service


#- name: Check information associated to mountpoint
#  command: findmnt --fstab '/boot'
#  register: device_name
#  failed_when: device_name.rc > 1
#  changed_when: false
#  when:
#  - mount_option_boot_nodev | bool

#- debug: var=device_name 

#- name: Create mount_info dictionary variable
#  set_fact:
#    mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
#  with_together:
#  - '{{ device_name.stdout_lines[0].split() | list | lower }}'
#  - '{{ device_name.stdout_lines[1].split() | list }}'
#  when:
#  - device_name.stdout is defined and device_name.stdout_lines is defined
#  - (device_name.stdout | length > 0)
#  - mount_option_boot_nodev | bool

#- name: Make sure nodev option is part of the to /boot options
#  set_fact:
#    mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nodev'' }) }}'
#  when:
#  - mount_info is defined and "nodev" not in mount_info.options
#  - mount_option_boot_nodev | bool
